{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Scene","props","tick","chords","notes","Chord","chord","state","pos","setState","map","num","note","length","Engine","Matter","Render","World","Bodies","Mouse","MouseConstraint","engine","create","positionIterations","world","gravity","y","render","element","this","refs","scene","options","width","height","wireframes","set","isStatic","restitution","friction","frictionAir","frictionStatic","inertia","Infinity","label","add","rectangle","ballSet","Object","assign","circle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","synth","Tone","C4","baseUrl","chain","Events","on","event","undefined","pairs","find","pair","bodyA","includes","bodyB","Math","floor","random","triggerAttackRelease","run","setInterval","ref","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5dcd69e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Matter from \"matter-js\";\nimport { Chord } from '@tonaljs/tonal';\nimport * as Tone from 'tone';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>glass-bead-music-box</h1>\n      <Scene></Scene>\n    </div>\n  );\n}\n\ninterface ISceneState {\n  chord: string[][];\n  pos: number;\n}\n\nclass Scene extends React.Component<Object, ISceneState>  {\n  constructor(props: Readonly<{}>) {\n    super(props);\n    this.state = { chord: [[\"C3\", \"C4\", \"C5\"]], pos: 0 };\n  }\n\n  componentDidMount() {\n    const Engine = Matter.Engine,\n      Render = Matter.Render,\n      World = Matter.World,\n      Bodies = Matter.Bodies,\n      Mouse = Matter.Mouse,\n      MouseConstraint = Matter.MouseConstraint;\n\n    const engine = Engine.create({\n      positionIterations: 20\n    });\n\n    engine.world.gravity.y = 0;\n\n    const render = Render.create({\n      element: this.refs.scene as HTMLElement,\n      engine: engine,\n      options: {\n        width: 600,\n        height: 600,\n        wireframes: true\n      }\n    });\n\n    const set: Matter.IChamferableBodyDefinition = {\n      isStatic: true,\n      restitution: 1,\n      friction: 0,\n      frictionAir: 0,\n      frictionStatic: 0,\n      inertia: Infinity,\n      label: ''\n    };\n\n    //add walls\n    World.add(engine.world, [\n      Bodies.rectangle(300, -100, 800, 200, set),\n      Bodies.rectangle(300, 700, 800, 200, set),\n      Bodies.rectangle(700, 300, 200, 600, set),\n      Bodies.rectangle(-100, 300, 200, 600, set)\n    ]);\n\n    const ballSet = Object.assign({}, set)\n    ballSet.isStatic = false\n    ballSet.label = \"ball\"\n\n    //add balls\n    World.add(engine.world, [\n      Bodies.circle(100, 100, 50, ballSet),\n      Bodies.circle(200, 200, 60, ballSet),\n      Bodies.circle(320, 320, 70, ballSet),\n      Bodies.circle(450, 450, 80, ballSet)\n    ]);\n\n    // add mouse control\n    const mouse = Mouse.create(render.canvas),\n      mouseConstraint = MouseConstraint.create(engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.2,\n          render: {\n            visible: false\n          }\n        } as Matter.Constraint\n      });\n\n    World.add(engine.world, mouseConstraint)\n\n    //add collision sound\n    const synth =\n      new Tone.Sampler({\n        C4: \"vibraphone.mp3\"\n      }, {\n        baseUrl: \"./\"\n      }).chain(new Tone.Volume(-20), Tone.Destination)\n\n    Matter.Events.on(engine, 'collisionStart', (event) => {\n      if (event.pairs.find(pair => pair.bodyA.label.includes(\"ball\") && pair.bodyB.label.includes(\"ball\")) !== undefined)\n          this.state.chord[Math.floor(Math.random() * this.state.chord.length)]\n            .map(note =>\n              synth.triggerAttackRelease(note, \"1n\"))\n    })\n\n    Engine.run(engine)\n    Render.run(render)\n\n    this.tick()\n    setInterval(\n      () => this.tick(),\n      70 * 2 / 60 * 1000\n    );\n  }\n\n  tick = () => {\n    //const chords = [\n    // \"D\", \"G\", \"Em\", \"A\",\n    // \"D\", \"G\", \"Em\", \"A\",\n    // \"Bm\", \"A\", \"G\", \"D\",\n    // \"Em\", \"A\", \"D\", \"D\",\n    // \"D\", \"G\", \"A\", \"Em7\",\n    // \"D\", \"G\", \"A\", \"Em7\",]\n    const chords = [\"Am\", \"Em\", \"F\", \"C\", \"C\", \"G\", \"F\", \"C\"]\n    const notes = Chord.chord(chords[this.state.pos]).notes\n    const number = [\"3\", \"4\", \"5\"]\n\n    this.setState({\n      chord: number.map(num => notes.map(note => note + num)),\n      pos: (this.state.pos + 1 < chords.length) ? this.state.pos + 1 : 0\n    });\n  }\n\n  render() {\n    return <div ref=\"scene\" />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      // @ts-ignore\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}